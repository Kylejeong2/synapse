/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TreeIdRouteImport } from './routes/tree.$id'
import { Route as ChatIdRouteImport } from './routes/chat.$id'
import { Route as ApiChatRouteImport } from './routes/api.chat'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TreeIdRoute = TreeIdRouteImport.update({
  id: '/tree/$id',
  path: '/tree/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatIdRoute = ChatIdRouteImport.update({
  id: '/chat/$id',
  path: '/chat/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiChatRoute = ApiChatRouteImport.update({
  id: '/api/chat',
  path: '/api/chat',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api/chat': typeof ApiChatRoute
  '/chat/$id': typeof ChatIdRoute
  '/tree/$id': typeof TreeIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/chat': typeof ApiChatRoute
  '/chat/$id': typeof ChatIdRoute
  '/tree/$id': typeof TreeIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api/chat': typeof ApiChatRoute
  '/chat/$id': typeof ChatIdRoute
  '/tree/$id': typeof TreeIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/api/chat' | '/chat/$id' | '/tree/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/api/chat' | '/chat/$id' | '/tree/$id'
  id: '__root__' | '/' | '/api/chat' | '/chat/$id' | '/tree/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiChatRoute: typeof ApiChatRoute
  ChatIdRoute: typeof ChatIdRoute
  TreeIdRoute: typeof TreeIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tree/$id': {
      id: '/tree/$id'
      path: '/tree/$id'
      fullPath: '/tree/$id'
      preLoaderRoute: typeof TreeIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/$id': {
      id: '/chat/$id'
      path: '/chat/$id'
      fullPath: '/chat/$id'
      preLoaderRoute: typeof ChatIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/chat': {
      id: '/api/chat'
      path: '/api/chat'
      fullPath: '/api/chat'
      preLoaderRoute: typeof ApiChatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiChatRoute: ApiChatRoute,
  ChatIdRoute: ChatIdRoute,
  TreeIdRoute: TreeIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
